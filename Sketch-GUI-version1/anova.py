#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 6.0.1
#  in conjunction with Tcl version 8.6
#    Sep 13, 2021 12:30:29 PM -03  platform: Linux

import sys

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import anova_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    anova_support.set_Tk_var()
    top = ToplevelAnova (root)
    anova_support.init(root, top)
    root.mainloop()

w = None
def create_ToplevelAnova(rt, *args, **kwargs):
    '''Starting point when module is imported by another module.
       Correct form of call: 'create_ToplevelAnova(root, *args, **kwargs)' .'''
    global w, w_win, root
    #rt = root
    root = rt
    w = tk.Toplevel (root)
    anova_support.set_Tk_var()
    top = ToplevelAnova (w)
    anova_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_ToplevelAnova():
    global w
    w.destroy()
    w = None

class ToplevelAnova:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("1399x756+251+181")
        top.minsize(1, 1)
        top.maxsize(1905, 1050)
        top.resizable(1,  1)
        top.title("Sketch - Analysis of Variance (ANOVA)")
        top.configure(highlightcolor="black")

        self.TFrameDataMainPage = ttk.Frame(top)
        self.TFrameDataMainPage.place(relx=0.007, rely=0.087, relheight=0.246
                , relwidth=0.985)
        self.TFrameDataMainPage.configure(relief='groove')
        self.TFrameDataMainPage.configure(borderwidth="1")
        self.TFrameDataMainPage.configure(relief="groove")

        self.TLabelInfoCompleteQuery = ttk.Label(top)
        self.TLabelInfoCompleteQuery.place(relx=0.008, rely=0.345, height=41
                , width=313)
        self.TLabelInfoCompleteQuery.configure(background="#d9d9d9")
        self.TLabelInfoCompleteQuery.configure(foreground="#000000")
        self.TLabelInfoCompleteQuery.configure(font="-family {bitstream charter} -size 14")
        self.TLabelInfoCompleteQuery.configure(relief="flat")
        self.TLabelInfoCompleteQuery.configure(anchor='w')
        self.TLabelInfoCompleteQuery.configure(justify='left')
        self.TLabelInfoCompleteQuery.configure(text='''ANOVA Visual Analysis''')

        self.TLabelInfoCorrelationQuery = ttk.Label(top)
        self.TLabelInfoCorrelationQuery.place(relx=0.525, rely=0.347, height=41
                , width=242)
        self.TLabelInfoCorrelationQuery.configure(background="#d9d9d9")
        self.TLabelInfoCorrelationQuery.configure(foreground="#000000")
        self.TLabelInfoCorrelationQuery.configure(font="-family {bitstream charter} -size 14")
        self.TLabelInfoCorrelationQuery.configure(relief="flat")
        self.TLabelInfoCorrelationQuery.configure(anchor='w')
        self.TLabelInfoCorrelationQuery.configure(justify='left')
        self.TLabelInfoCorrelationQuery.configure(text='''ANOVA-based Query Results''')

        self.TSeparator1 = ttk.Separator(top)
        self.TSeparator1.place(relx=0.009, rely=0.347,  relwidth=0.984)

        self.TSeparator2 = ttk.Separator(top)
        self.TSeparator2.place(relx=0.515, rely=0.356,  relheight=0.638)
        self.TSeparator2.configure(orient="vertical")

        self.TFrameDataMainPageCompQ = ttk.Frame(top)
        self.TFrameDataMainPageCompQ.place(relx=0.007, rely=0.392
                , relheight=0.549, relwidth=0.5)
        self.TFrameDataMainPageCompQ.configure(relief='groove')
        self.TFrameDataMainPageCompQ.configure(borderwidth="1")
        self.TFrameDataMainPageCompQ.configure(relief="groove")

        self.TFrameDataMainPageCorrQ = ttk.Frame(top)
        self.TFrameDataMainPageCorrQ.place(relx=0.523, rely=0.393
                , relheight=0.549, relwidth=0.469)
        self.TFrameDataMainPageCorrQ.configure(relief='groove')
        self.TFrameDataMainPageCorrQ.configure(borderwidth="1")
        self.TFrameDataMainPageCorrQ.configure(relief="groove")

        self.TLabelframeQueryAttibutes = ttk.Labelframe(top)
        self.TLabelframeQueryAttibutes.place(relx=0.007, rely=0.005
                , relheight=0.067, relwidth=0.894)
        self.TLabelframeQueryAttibutes.configure(relief='')
        self.TLabelframeQueryAttibutes.configure(text='''Run ANOVA over selected variables''')

        self.TComboboxAttReference1 = ttk.Combobox(self.TLabelframeQueryAttibutes)
        self.TComboboxAttReference1.place(relx=0.129, rely=0.294, relheight=0.549
                , relwidth=0.172, bordermode='ignore')
        self.value_list = ['Attributes',]
        self.TComboboxAttReference1.configure(values=self.value_list)
        self.TComboboxAttReference1.configure(justify='center')
        self.TComboboxAttReference1.configure(textvariable=anova_support.comboAttReference1)
        self.TComboboxAttReference1.configure(takefocus="")

        self.TComboboxAttReference2 = ttk.Combobox(self.TLabelframeQueryAttibutes)
        self.TComboboxAttReference2.place(relx=0.42, rely=0.294, relheight=0.549
                , relwidth=0.164, bordermode='ignore')
        self.value_list = ['Attributes',]
        self.TComboboxAttReference2.configure(values=self.value_list)
        self.TComboboxAttReference2.configure(justify='center')
        self.TComboboxAttReference2.configure(textvariable=anova_support.comboAttReference2)
        self.TComboboxAttReference2.configure(takefocus="")

        self.TLabelAtt1 = ttk.Label(self.TLabelframeQueryAttibutes)
        self.TLabelAtt1.place(relx=0.007, rely=0.392, height=18, width=150
                , bordermode='ignore')
        self.TLabelAtt1.configure(background="#d9d9d9")
        self.TLabelAtt1.configure(foreground="#000000")
        self.TLabelAtt1.configure(font="TkDefaultFont")
        self.TLabelAtt1.configure(relief="flat")
        self.TLabelAtt1.configure(anchor='w')
        self.TLabelAtt1.configure(justify='left')
        self.TLabelAtt1.configure(text='''Categorical variable:''')
        self.TLabelAtt1.configure(cursor="fleur")

        self.TLabelAtt1_1 = ttk.Label(self.TLabelframeQueryAttibutes)
        self.TLabelAtt1_1.place(relx=0.305, rely=0.392, height=18, width=140
                , bordermode='ignore')
        self.TLabelAtt1_1.configure(background="#d9d9d9")
        self.TLabelAtt1_1.configure(foreground="#000000")
        self.TLabelAtt1_1.configure(font="TkDefaultFont")
        self.TLabelAtt1_1.configure(relief="flat")
        self.TLabelAtt1_1.configure(anchor='w')
        self.TLabelAtt1_1.configure(justify='left')
        self.TLabelAtt1_1.configure(text='''Numerical variable:''')

        self.btnRetrieveTuplesCorr_1 = ttk.Button(self.TLabelframeQueryAttibutes)
        self.btnRetrieveTuplesCorr_1.place(relx=0.751, rely=0.255, height=30
                , width=100, bordermode='ignore')
        self.btnRetrieveTuplesCorr_1.configure(command=anova_support.btnRunQueryANOVA)
        self.btnRetrieveTuplesCorr_1.configure(takefocus="")
        self.btnRetrieveTuplesCorr_1.configure(text='''Run ANOVA''')

        self.style.map('TCheckbutton',background=
            [('selected', _bgcolor), ('active', _ana2color)])
        self.TCheckbuttonChartHorizontal = ttk.Checkbutton(self.TLabelframeQueryAttibutes)
        self.TCheckbuttonChartHorizontal.place(relx=0.595, rely=0.392
                , relwidth=0.071, relheight=0.0, height=16, bordermode='ignore')
        self.TCheckbuttonChartHorizontal.configure(variable=anova_support.checkChartHorizontalVar)
        self.TCheckbuttonChartHorizontal.configure(takefocus="")
        self.TCheckbuttonChartHorizontal.configure(text='''Horizontal Bars''')

        self.TCheckbuttonChartShowLabel = ttk.Checkbutton(self.TLabelframeQueryAttibutes)
        self.TCheckbuttonChartShowLabel.place(relx=0.667, rely=0.392
                , relwidth=0.079, relheight=0.0, height=16, bordermode='ignore')
        self.TCheckbuttonChartShowLabel.configure(variable=anova_support.checkLabelChartVar)
        self.TCheckbuttonChartShowLabel.configure(takefocus="")
        self.TCheckbuttonChartShowLabel.configure(text='''Show Labels''')

        self.TSeparator3 = ttk.Separator(self.TLabelframeQueryAttibutes)
        self.TSeparator3.place(relx=0.588, rely=0.255, relheight=0.588
                , bordermode='ignore')
        self.TSeparator3.configure(orient="vertical")

        self.TSeparator3_1 = ttk.Separator(self.TLabelframeQueryAttibutes)
        self.TSeparator3_1.place(relx=0.746, rely=0.255, relheight=0.588
                , bordermode='ignore')
        self.TSeparator3_1.configure(orient="vertical")

        self.TLabelRunOutput = ttk.Label(self.TLabelframeQueryAttibutes)
        self.TLabelRunOutput.place(relx=0.839, rely=0.235, height=33, width=184
                , bordermode='ignore')
        self.TLabelRunOutput.configure(background="#d9d9d9")
        self.TLabelRunOutput.configure(foreground="#000000")
        self.TLabelRunOutput.configure(font="TkDefaultFont")
        self.TLabelRunOutput.configure(relief="flat")
        self.TLabelRunOutput.configure(anchor='w')
        self.TLabelRunOutput.configure(justify='left')
        self.TLabelRunOutput.configure(wraplength="80")
        self.TLabelRunOutput.configure(textvariable=anova_support.VarRunOutput)

        self.TButtonCloseAnovaWindow = ttk.Button(top)
        self.TButtonCloseAnovaWindow.place(relx=0.908, rely=0.013, height=45
                , width=115)
        self.TButtonCloseAnovaWindow.configure(command=anova_support.btnCloseAnovaWindow)
        self.TButtonCloseAnovaWindow.configure(takefocus="")
        self.TButtonCloseAnovaWindow.configure(text='''Close''')

        self.menubar = tk.Menu(top,font="TkMenuFont",bg=_bgcolor,fg=_fgcolor)
        top.configure(menu = self.menubar)

        self.TButtonSaveBoxplotImage = ttk.Button(top)
        self.TButtonSaveBoxplotImage.place(relx=0.007, rely=0.948, height=30
                , width=699)
        self.TButtonSaveBoxplotImage.configure(command=anova_support.btnSaveBoxplotImage)
        self.TButtonSaveBoxplotImage.configure(takefocus="")
        self.TButtonSaveBoxplotImage.configure(text='''Save boxplot image''')

        self.TButtonSaveAnovaResults = ttk.Button(top)
        self.TButtonSaveAnovaResults.place(relx=0.523, rely=0.948, height=30
                , width=656)
        self.TButtonSaveAnovaResults.configure(command=anova_support.btnSaveAnovaResults)
        self.TButtonSaveAnovaResults.configure(takefocus="")
        self.TButtonSaveAnovaResults.configure(text='''Save ANOVA results''')

if __name__ == '__main__':
    vp_start_gui()





