#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 6.0.1
#  in conjunction with Tcl version 8.6
#    Sep 13, 2021 12:09:13 PM -03  platform: Linux

import sys

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import arlift_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    arlift_support.set_Tk_var()
    top = ToplevelARL (root)
    arlift_support.init(root, top)
    root.mainloop()

w = None
def create_ToplevelARL(rt, *args, **kwargs):
    '''Starting point when module is imported by another module.
       Correct form of call: 'create_ToplevelARL(root, *args, **kwargs)' .'''
    global w, w_win, root
    #rt = root
    root = rt
    w = tk.Toplevel (root)
    arlift_support.set_Tk_var()
    top = ToplevelARL (w)
    arlift_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_ToplevelARL():
    global w
    w.destroy()
    w = None

class ToplevelARL:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("1366x665+231+276")
        top.minsize(1, 1)
        top.maxsize(1905, 1050)
        top.resizable(1,  1)
        top.title("Sketch - Association Rules with Lift Correlation")
        top.configure(highlightcolor="black")

        self.CanvasPlotAR = tk.Canvas(top)
        self.CanvasPlotAR.place(relx=0.496, rely=0.205, relheight=0.725
                , relwidth=0.498)
        self.CanvasPlotAR.configure(borderwidth="1")
        self.CanvasPlotAR.configure(relief="ridge")
        self.CanvasPlotAR.configure(selectbackground="blue")
        self.CanvasPlotAR.configure(selectforeground="white")

        self.TFrameData = ttk.Frame(top)
        self.TFrameData.place(relx=0.007, rely=0.206, relheight=0.722
                , relwidth=0.487)
        self.TFrameData.configure(relief='groove')
        self.TFrameData.configure(borderwidth="1")
        self.TFrameData.configure(relief="groove")

        self.TLabelframeDataSelection = ttk.Labelframe(top)
        self.TLabelframeDataSelection.place(relx=0.007, rely=0.003
                , relheight=0.186, relwidth=0.381)
        self.TLabelframeDataSelection.configure(relief='')
        self.TLabelframeDataSelection.configure(text='''Attribute Selection''')

        self.TLabelAttribute_1 = ttk.Label(self.TLabelframeDataSelection)
        self.TLabelAttribute_1.place(relx=0.029, rely=0.153, height=17, width=72
                , bordermode='ignore')
        self.TLabelAttribute_1.configure(background="#d9d9d9")
        self.TLabelAttribute_1.configure(foreground="#000000")
        self.TLabelAttribute_1.configure(font="TkDefaultFont")
        self.TLabelAttribute_1.configure(relief="flat")
        self.TLabelAttribute_1.configure(anchor='w')
        self.TLabelAttribute_1.configure(justify='left')
        self.TLabelAttribute_1.configure(text='''Attribute:''')

        self.TComboboxSelectedAttribute = ttk.Combobox(self.TLabelframeDataSelection)
        self.TComboboxSelectedAttribute.place(relx=0.175, rely=0.129
                , relheight=0.194, relwidth=0.44, bordermode='ignore')
        self.TComboboxSelectedAttribute.configure(state='readonly')

        self.TButtonAddAttribute = ttk.Button(self.TLabelframeDataSelection)
        self.TButtonAddAttribute.place(relx=0.027, rely=0.371, height=33
                , width=305, bordermode='ignore')
        self.TButtonAddAttribute.configure(command=arlift_support.btnAddAttToList)
        self.TButtonAddAttribute.configure(takefocus="")
        self.TButtonAddAttribute.configure(text='''Select Attribute''')

        self.TButtonRemoveAttribute = ttk.Button(self.TLabelframeDataSelection)
        self.TButtonRemoveAttribute.place(relx=0.027, rely=0.677, height=33
                , width=305, bordermode='ignore')
        self.TButtonRemoveAttribute.configure(command=arlift_support.btnRemoveAttFromList)
        self.TButtonRemoveAttribute.configure(takefocus="")
        self.TButtonRemoveAttribute.configure(text='''Remove Attribute''')

        self.ScrolledlistboxSelectedAttributes = ScrolledListBox(self.TLabelframeDataSelection)
        self.ScrolledlistboxSelectedAttributes.place(relx=0.638, rely=0.081
                , relheight=0.863, relwidth=0.338, bordermode='ignore')
        self.ScrolledlistboxSelectedAttributes.configure(background="white")
        self.ScrolledlistboxSelectedAttributes.configure(cursor="xterm")
        self.ScrolledlistboxSelectedAttributes.configure(font="TkFixedFont")
        self.ScrolledlistboxSelectedAttributes.configure(highlightcolor="#d9d9d9")
        self.ScrolledlistboxSelectedAttributes.configure(selectbackground="blue")
        self.ScrolledlistboxSelectedAttributes.configure(selectforeground="white")
        self.ScrolledlistboxSelectedAttributes.configure(selectmode='single')
        self.ScrolledlistboxSelectedAttributes.configure(listvariable=arlift_support.listSelectedAttributesVar)

        self.TLabelframe1 = ttk.Labelframe(top)
        self.TLabelframe1.place(relx=0.393, rely=0.003, relheight=0.188
                , relwidth=0.534)
        self.TLabelframe1.configure(relief='')
        self.TLabelframe1.configure(text='''Discover Association Rules''')

        self.TLabel1 = ttk.Label(self.TLabelframe1)
        self.TLabel1.place(relx=0.014, rely=0.16, height=14, width=97
                , bordermode='ignore')
        self.TLabel1.configure(background="#d9d9d9")
        self.TLabel1.configure(foreground="#000000")
        self.TLabel1.configure(relief="flat")
        self.TLabel1.configure(anchor='w')
        self.TLabel1.configure(justify='left')
        self.TLabel1.configure(text='''Min. Sup.:''')

        self.TLabel2 = ttk.Label(self.TLabelframe1)
        self.TLabel2.place(relx=0.014, rely=0.352, height=14, width=97
                , bordermode='ignore')
        self.TLabel2.configure(background="#d9d9d9")
        self.TLabel2.configure(foreground="#000000")
        self.TLabel2.configure(relief="flat")
        self.TLabel2.configure(anchor='w')
        self.TLabel2.configure(justify='left')
        self.TLabel2.configure(text='''Min. Conf.:''')

        self.SpinboxMinSup = tk.Spinbox(self.TLabelframe1, from_=0.0, to=1.0)
        self.SpinboxMinSup.place(relx=0.134, rely=0.144, relheight=0.16
                , relwidth=0.078, bordermode='ignore')
        self.SpinboxMinSup.configure(activebackground="#f9f9f9")
        self.SpinboxMinSup.configure(background="white")
        self.SpinboxMinSup.configure(font="TkDefaultFont")
        self.SpinboxMinSup.configure(highlightbackground="black")
        self.SpinboxMinSup.configure(increment="0.05")
        self.SpinboxMinSup.configure(selectbackground="blue")
        self.SpinboxMinSup.configure(selectforeground="white")
        self.SpinboxMinSup.configure(textvariable=arlift_support.spinboxMinSupport)

        self.SpinboxMinConf = tk.Spinbox(self.TLabelframe1, from_=0.0, to=1.0)
        self.SpinboxMinConf.place(relx=0.134, rely=0.336, relheight=0.16
                , relwidth=0.078, bordermode='ignore')
        self.SpinboxMinConf.configure(activebackground="#f9f9f9")
        self.SpinboxMinConf.configure(background="white")
        self.SpinboxMinConf.configure(font="TkDefaultFont")
        self.SpinboxMinConf.configure(highlightbackground="black")
        self.SpinboxMinConf.configure(increment="0.05")
        self.SpinboxMinConf.configure(selectbackground="blue")
        self.SpinboxMinConf.configure(selectforeground="white")
        self.SpinboxMinConf.configure(textvariable=arlift_support.spinboxMinConfidence)

        self.TSeparator1 = ttk.Separator(self.TLabelframe1)
        self.TSeparator1.place(relx=0.238, rely=0.12, relheight=0.8
                , bordermode='ignore')
        self.TSeparator1.configure(orient="vertical")

        self.EntryInputTransactions = tk.Entry(self.TLabelframe1)
        self.EntryInputTransactions.place(relx=0.403, rely=0.112, height=26
                , relwidth=0.296, bordermode='ignore')
        self.EntryInputTransactions.configure(background="white")
        self.EntryInputTransactions.configure(font="TkFixedFont")
        self.EntryInputTransactions.configure(selectbackground="blue")
        self.EntryInputTransactions.configure(selectforeground="white")
        self.EntryInputTransactions.configure(textvariable=arlift_support.entryInputTransactionsVar)

        self.TButtonLoadTransactions = ttk.Button(self.TLabelframe1)
        self.TButtonLoadTransactions.place(relx=0.7, rely=0.12, height=23
                , width=25, bordermode='ignore')
        self.TButtonLoadTransactions.configure(command=arlift_support.btnLoadTransactions)
        self.TButtonLoadTransactions.configure(takefocus="")
        self.TButtonLoadTransactions.configure(text='''...''')

        self.TLabel1_1 = ttk.Label(self.TLabelframe1)
        self.TLabel1_1.place(relx=0.252, rely=0.176, height=14, width=97
                , bordermode='ignore')
        self.TLabel1_1.configure(background="#d9d9d9")
        self.TLabel1_1.configure(foreground="#000000")
        self.TLabel1_1.configure(relief="flat")
        self.TLabel1_1.configure(anchor='w')
        self.TLabel1_1.configure(justify='left')
        self.TLabel1_1.configure(text='''Transactions:''')

        self.TLabel1_1_1 = ttk.Label(self.TLabelframe1)
        self.TLabel1_1_1.place(relx=0.253, rely=0.376, height=14, width=87
                , bordermode='ignore')
        self.TLabel1_1_1.configure(background="#d9d9d9")
        self.TLabel1_1_1.configure(foreground="#000000")
        self.TLabel1_1_1.configure(relief="flat")
        self.TLabel1_1_1.configure(anchor='w')
        self.TLabel1_1_1.configure(justify='left')
        self.TLabel1_1_1.configure(text='''A. Rules:''')

        self.EntryInputAssociationRules = tk.Entry(self.TLabelframe1)
        self.EntryInputAssociationRules.place(relx=0.403, rely=0.32, height=26
                , relwidth=0.296, bordermode='ignore')
        self.EntryInputAssociationRules.configure(background="white")
        self.EntryInputAssociationRules.configure(font="TkFixedFont")
        self.EntryInputAssociationRules.configure(selectbackground="blue")
        self.EntryInputAssociationRules.configure(selectforeground="white")
        self.EntryInputAssociationRules.configure(textvariable=arlift_support.entryInputRulesVar)

        self.TButtonLoadARules = ttk.Button(self.TLabelframe1)
        self.TButtonLoadARules.place(relx=0.7, rely=0.336, height=23, width=25
                , bordermode='ignore')
        self.TButtonLoadARules.configure(command=arlift_support.btnLoadARules)
        self.TButtonLoadARules.configure(takefocus="")
        self.TButtonLoadARules.configure(text='''...''')

        self.TButtonVisualizeSankeyDiagram = ttk.Button(self.TLabelframe1)
        self.TButtonVisualizeSankeyDiagram.place(relx=0.751, rely=0.344
                , height=33, width=175, bordermode='ignore')
        self.TButtonVisualizeSankeyDiagram.configure(command=arlift_support.btnVisualizeSankeyDiagram)
        self.TButtonVisualizeSankeyDiagram.configure(takefocus="")
        self.TButtonVisualizeSankeyDiagram.configure(text='''Static Sankey Diagram''')

        self.TButtonDiscoverARL = ttk.Button(self.TLabelframe1)
        self.TButtonDiscoverARL.place(relx=0.014, rely=0.56, height=43, width=145
                , bordermode='ignore')
        self.TButtonDiscoverARL.configure(command=arlift_support.btnDiscoverARL)
        self.TButtonDiscoverARL.configure(takefocus="")
        self.TButtonDiscoverARL.configure(text='''Discover A. Rules''')

        self.TButtonLoadFilesAR = ttk.Button(self.TLabelframe1)
        self.TButtonLoadFilesAR.place(relx=0.249, rely=0.56, height=43, width=355
                , bordermode='ignore')
        self.TButtonLoadFilesAR.configure(command=arlift_support.btnLoadFilesAR)
        self.TButtonLoadFilesAR.configure(takefocus="")
        self.TButtonLoadFilesAR.configure(text='''Load Files with Transactions and A. Rules''')

        self.TSeparator1_1 = ttk.Separator(self.TLabelframe1)
        self.TSeparator1_1.place(relx=0.744, rely=0.104, relheight=0.8
                , bordermode='ignore')
        self.TSeparator1_1.configure(orient="vertical")

        self.TButtonVisualizeSankeyDiagramHTML = ttk.Button(self.TLabelframe1)
        self.TButtonVisualizeSankeyDiagramHTML.place(relx=0.751, rely=0.632
                , height=33, width=175, bordermode='ignore')
        self.TButtonVisualizeSankeyDiagramHTML.configure(command=arlift_support.btnVisualizeSankeyDiagramHTML)
        self.TButtonVisualizeSankeyDiagramHTML.configure(takefocus="")
        self.TButtonVisualizeSankeyDiagramHTML.configure(text='''Dinamic Sankey Diagram''')

        self.TLabel1_1_2 = ttk.Label(self.TLabelframe1)
        self.TLabel1_1_2.place(relx=0.755, rely=0.16, height=14, width=167
                , bordermode='ignore')
        self.TLabel1_1_2.configure(background="#d9d9d9")
        self.TLabel1_1_2.configure(foreground="#000000")
        self.TLabel1_1_2.configure(relief="flat")
        self.TLabel1_1_2.configure(anchor='w')
        self.TLabel1_1_2.configure(justify='left')
        self.TLabel1_1_2.configure(text='''AR Visualization''')
        self.TLabel1_1_2.configure(compound='center')

        self.TButtonCloseARL = ttk.Button(top)
        self.TButtonCloseARL.place(relx=0.931, rely=0.012, height=118, width=85)
        self.TButtonCloseARL.configure(command=arlift_support.btnCloseARL)
        self.TButtonCloseARL.configure(takefocus="")
        self.TButtonCloseARL.configure(text='''Close''')

        self.TButtonSaveSankeyImage = ttk.Button(top)
        self.TButtonSaveSankeyImage.place(relx=0.498, rely=0.937, height=33
                , width=675)
        self.TButtonSaveSankeyImage.configure(command=arlift_support.btnSaveSankeyImage)
        self.TButtonSaveSankeyImage.configure(takefocus="")
        self.TButtonSaveSankeyImage.configure(text='''Save Sankey Image''')

        self.TButtonSaveRulesTransactions = ttk.Button(top)
        self.TButtonSaveRulesTransactions.place(relx=0.007, rely=0.937, height=33
                , width=665)
        self.TButtonSaveRulesTransactions.configure(command=arlift_support.btnSaveRulesTransactions)
        self.TButtonSaveRulesTransactions.configure(takefocus="")
        self.TButtonSaveRulesTransactions.configure(text='''Save Discovered Rules and Transactions''')

# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''
    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))
        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')
        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)
        # Copy geometry methods of master  (taken from ScrolledText.py)
        if py3:
            methods = tk.Pack.__dict__.keys() | tk.Grid.__dict__.keys() \
                  | tk.Place.__dict__.keys()
        else:
            methods = tk.Pack.__dict__.keys() + tk.Grid.__dict__.keys() \
                  + tk.Place.__dict__.keys()
        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''
        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)
        return wrapped

    def __str__(self):
        return str(self.master)

def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''
    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        container.bind('<Enter>', lambda e: _bound_to_mousewheel(e, container))
        container.bind('<Leave>', lambda e: _unbound_to_mousewheel(e, container))
        return func(cls, container, **kw)
    return wrapped

class ScrolledListBox(AutoScroll, tk.Listbox):
    '''A standard Tkinter Listbox widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        tk.Listbox.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)
    def size_(self):
        sz = tk.Listbox.size(self)
        return sz

import platform
def _bound_to_mousewheel(event, widget):
    child = widget.winfo_children()[0]
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        child.bind_all('<MouseWheel>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-MouseWheel>', lambda e: _on_shiftmouse(e, child))
    else:
        child.bind_all('<Button-4>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Button-5>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-Button-4>', lambda e: _on_shiftmouse(e, child))
        child.bind_all('<Shift-Button-5>', lambda e: _on_shiftmouse(e, child))

def _unbound_to_mousewheel(event, widget):
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        widget.unbind_all('<MouseWheel>')
        widget.unbind_all('<Shift-MouseWheel>')
    else:
        widget.unbind_all('<Button-4>')
        widget.unbind_all('<Button-5>')
        widget.unbind_all('<Shift-Button-4>')
        widget.unbind_all('<Shift-Button-5>')

def _on_mousewheel(event, widget):
    if platform.system() == 'Windows':
        widget.yview_scroll(-1*int(event.delta/120),'units')
    elif platform.system() == 'Darwin':
        widget.yview_scroll(-1*int(event.delta),'units')
    else:
        if event.num == 4:
            widget.yview_scroll(-1, 'units')
        elif event.num == 5:
            widget.yview_scroll(1, 'units')

def _on_shiftmouse(event, widget):
    if platform.system() == 'Windows':
        widget.xview_scroll(-1*int(event.delta/120), 'units')
    elif platform.system() == 'Darwin':
        widget.xview_scroll(-1*int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.xview_scroll(-1, 'units')
        elif event.num == 5:
            widget.xview_scroll(1, 'units')

if __name__ == '__main__':
    vp_start_gui()





