#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 6.0.1
#  in conjunction with Tcl version 8.6
#    Sep 10, 2021 12:07:27 PM -03  platform: Linux

import sys

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import main_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    main_support.set_Tk_var()
    top = ToplevelCompTuple (root)
    main_support.init(root, top)
    root.mainloop()

w = None
def create_ToplevelCompTuple(rt, *args, **kwargs):
    '''Starting point when module is imported by another module.
       Correct form of call: 'create_ToplevelCompTuple(root, *args, **kwargs)' .'''
    global w, w_win, root
    #rt = root
    root = rt
    w = tk.Toplevel (root)
    main_support.set_Tk_var()
    top = ToplevelCompTuple (w)
    main_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_ToplevelCompTuple():
    global w
    w.destroy()
    w = None

class ToplevelCompTuple:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("1401x755+995+149")
        top.minsize(1, 1)
        top.maxsize(1905, 1050)
        top.resizable(1,  1)
        top.title("Sketch - Similarity Search Supported by Correlation Methods - Data Overview")
        top.configure(highlightcolor="black")

        self.TFrameDataMainPage = ttk.Frame(top)
        self.TFrameDataMainPage.place(relx=0.007, rely=0.358, relheight=0.538
                , relwidth=0.985)
        self.TFrameDataMainPage.configure(relief='groove')
        self.TFrameDataMainPage.configure(borderwidth="1")
        self.TFrameDataMainPage.configure(relief="groove")

        self.TLabelframe1 = ttk.Labelframe(top)
        self.TLabelframe1.place(relx=0.007, rely=0.013, relheight=0.114
                , relwidth=0.448)
        self.TLabelframe1.configure(relief='')
        self.TLabelframe1.configure(text='''Input Data''')

        self.TLabelInputData = ttk.Label(self.TLabelframe1)
        self.TLabelInputData.place(relx=0.032, rely=0.221, height=26, width=124
                , bordermode='ignore')
        self.TLabelInputData.configure(background="#d9d9d9")
        self.TLabelInputData.configure(foreground="#000000")
        self.TLabelInputData.configure(font="TkDefaultFont")
        self.TLabelInputData.configure(relief="flat")
        self.TLabelInputData.configure(anchor='w')
        self.TLabelInputData.configure(justify='left')
        self.TLabelInputData.configure(text='''Input data file''')

        self.TLabelInputFileDisplay = ttk.Label(self.TLabelframe1)
        self.TLabelInputFileDisplay.place(relx=0.207, rely=0.151, height=27
                , width=284, bordermode='ignore')
        self.TLabelInputFileDisplay.configure(background="#f4f4f4")
        self.TLabelInputFileDisplay.configure(foreground="#000000")
        self.TLabelInputFileDisplay.configure(font="TkDefaultFont")
        self.TLabelInputFileDisplay.configure(borderwidth="2")
        self.TLabelInputFileDisplay.configure(relief="flat")
        self.TLabelInputFileDisplay.configure(anchor='w')
        self.TLabelInputFileDisplay.configure(justify='left')
        self.TLabelInputFileDisplay.configure(textvariable=main_support.VarInputFile)

        self.btnSelectFile = ttk.Button(self.TLabelframe1)
        self.btnSelectFile.place(relx=0.667, rely=0.128, height=32, width=96
                , bordermode='ignore')
        self.btnSelectFile.configure(command=main_support.btnSelectFile)
        self.btnSelectFile.configure(takefocus="")
        self.btnSelectFile.configure(text='''Choose File''')

        self.btnLoadFile = ttk.Button(self.TLabelframe1)
        self.btnLoadFile.place(relx=0.833, rely=0.14, height=66, width=94
                , bordermode='ignore')
        self.btnLoadFile.configure(command=main_support.btnLoadFile)
        self.btnLoadFile.configure(takefocus="")
        self.btnLoadFile.configure(text='''Load Data''')

        self.TLabelInputDataTypes = ttk.Label(self.TLabelframe1)
        self.TLabelInputDataTypes.place(relx=0.032, rely=0.57, height=25
                , width=107, bordermode='ignore')
        self.TLabelInputDataTypes.configure(background="#d9d9d9")
        self.TLabelInputDataTypes.configure(foreground="#000000")
        self.TLabelInputDataTypes.configure(relief="flat")
        self.TLabelInputDataTypes.configure(anchor='w')
        self.TLabelInputDataTypes.configure(justify='left')
        self.TLabelInputDataTypes.configure(text='''Input data types file''')

        self.TLabelInputFileDisplay_1 = ttk.Label(self.TLabelframe1)
        self.TLabelInputFileDisplay_1.place(relx=0.207, rely=0.547, height=27
                , width=284, bordermode='ignore')
        self.TLabelInputFileDisplay_1.configure(background="#f4f4f4")
        self.TLabelInputFileDisplay_1.configure(foreground="#000000")
        self.TLabelInputFileDisplay_1.configure(font="TkDefaultFont")
        self.TLabelInputFileDisplay_1.configure(borderwidth="2")
        self.TLabelInputFileDisplay_1.configure(relief="flat")
        self.TLabelInputFileDisplay_1.configure(anchor='w')
        self.TLabelInputFileDisplay_1.configure(justify='left')
        self.TLabelInputFileDisplay_1.configure(textvariable=main_support.VarInputFileDataType)

        self.btnSelectFileDataType = ttk.Button(self.TLabelframe1)
        self.btnSelectFileDataType.place(relx=0.667, rely=0.535, height=32
                , width=96, bordermode='ignore')
        self.btnSelectFileDataType.configure(command=main_support.btnSelectFileDataType)
        self.btnSelectFileDataType.configure(takefocus="")
        self.btnSelectFileDataType.configure(text='''Choose File''')

        self.TLabelframeDatabaseConnection = ttk.Labelframe(top)
        self.TLabelframeDatabaseConnection.place(relx=0.465, rely=0.013
                , relheight=0.114, relwidth=0.527)
        self.TLabelframeDatabaseConnection.configure(relief='')
        self.TLabelframeDatabaseConnection.configure(text='''Connect Database''')

        self.TLabelDBName = ttk.Label(self.TLabelframeDatabaseConnection)
        self.TLabelDBName.place(relx=0.014, rely=0.233, height=16, width=64
                , bordermode='ignore')
        self.TLabelDBName.configure(background="#d9d9d9")
        self.TLabelDBName.configure(foreground="#000000")
        self.TLabelDBName.configure(font="TkDefaultFont")
        self.TLabelDBName.configure(relief="flat")
        self.TLabelDBName.configure(anchor='w')
        self.TLabelDBName.configure(justify='left')
        self.TLabelDBName.configure(text='''DB Name:''')

        self.btnLoadDBConfigFile = ttk.Button(self.TLabelframeDatabaseConnection)
        self.btnLoadDBConfigFile.place(relx=0.015, rely=0.523, height=35
                , width=204, bordermode='ignore')
        self.btnLoadDBConfigFile.configure(command=main_support.btnLoadDatabase)
        self.btnLoadDBConfigFile.configure(takefocus="")
        self.btnLoadDBConfigFile.configure(text='''Load Database''')

        self.TLabelInputUsername = ttk.Label(self.TLabelframeDatabaseConnection)
        self.TLabelInputUsername.place(relx=0.207, rely=0.233, height=14
                , width=71, bordermode='ignore')
        self.TLabelInputUsername.configure(background="#d9d9d9")
        self.TLabelInputUsername.configure(foreground="#000000")
        self.TLabelInputUsername.configure(relief="flat")
        self.TLabelInputUsername.configure(anchor='w')
        self.TLabelInputUsername.configure(justify='left')
        self.TLabelInputUsername.configure(text='''Username:''')

        self.TEntryDBName = ttk.Entry(self.TLabelframeDatabaseConnection)
        self.TEntryDBName.place(relx=0.091, rely=0.163, relheight=0.302
                , relwidth=0.108, bordermode='ignore')
        self.TEntryDBName.configure(takefocus="")
        self.TEntryDBName.configure(cursor="xterm")

        self.TEntryUsername = ttk.Entry(self.TLabelframeDatabaseConnection)
        self.TEntryUsername.place(relx=0.295, rely=0.163, relheight=0.302
                , relwidth=0.122, bordermode='ignore')
        self.TEntryUsername.configure(takefocus="")
        self.TEntryUsername.configure(cursor="xterm")

        self.TEntryPassword = ttk.Entry(self.TLabelframeDatabaseConnection)
        self.TEntryPassword.place(relx=0.514, rely=0.163, relheight=0.302
                , relwidth=0.108, bordermode='ignore')
        self.TEntryPassword.configure(show="*")
        self.TEntryPassword.configure(takefocus="")
        self.TEntryPassword.configure(cursor="xterm")

        self.TLabelPassword = ttk.Label(self.TLabelframeDatabaseConnection)
        self.TLabelPassword.place(relx=0.423, rely=0.221, height=16, width=64
                , bordermode='ignore')
        self.TLabelPassword.configure(background="#d9d9d9")
        self.TLabelPassword.configure(foreground="#000000")
        self.TLabelPassword.configure(font="TkDefaultFont")
        self.TLabelPassword.configure(relief="flat")
        self.TLabelPassword.configure(anchor='w')
        self.TLabelPassword.configure(justify='left')
        self.TLabelPassword.configure(text='''Password:''')

        self.TButtonSaveDatabaseConfigFile = ttk.Button(self.TLabelframeDatabaseConnection)
        self.TButtonSaveDatabaseConfigFile.place(relx=0.299, rely=0.523
                , height=35, width=244, bordermode='ignore')
        self.TButtonSaveDatabaseConfigFile.configure(command=main_support.btnSaveDatabaseConfigFile)
        self.TButtonSaveDatabaseConfigFile.configure(takefocus="")
        self.TButtonSaveDatabaseConfigFile.configure(text='''Save Database Configuration File''')

        self.ScrolledlistboxDBTables = ScrolledListBox(self.TLabelframeDatabaseConnection)
        self.ScrolledlistboxDBTables.place(relx=0.657, rely=0.14, relheight=0.779
                , relwidth=0.198, bordermode='ignore')
        self.ScrolledlistboxDBTables.configure(background="white")
        self.ScrolledlistboxDBTables.configure(cursor="xterm")
        self.ScrolledlistboxDBTables.configure(font="TkFixedFont")
        self.ScrolledlistboxDBTables.configure(highlightcolor="#d9d9d9")
        self.ScrolledlistboxDBTables.configure(selectbackground="blue")
        self.ScrolledlistboxDBTables.configure(selectforeground="white")
        self.ScrolledlistboxDBTables.configure(listvariable=main_support.listDBTablesVar)

        self.btnLoadSelectedTable = ttk.Button(self.TLabelframeDatabaseConnection)
        self.btnLoadSelectedTable.place(relx=0.862, rely=0.14, height=67
                , width=94, bordermode='ignore')
        self.btnLoadSelectedTable.configure(command=main_support.btnLoadSelectedTable)
        self.btnLoadSelectedTable.configure(takefocus="")
        self.btnLoadSelectedTable.configure(text='''Load Table''')

        self.TSeparator1 = ttk.Separator(self.TLabelframeDatabaseConnection)
        self.TSeparator1.place(relx=0.645, rely=0.174, relheight=0.698
                , bordermode='ignore')
        self.TSeparator1.configure(orient="vertical")

        self.TLabelframeQuery = ttk.Labelframe(top)
        self.TLabelframeQuery.place(relx=0.007, rely=0.143, relheight=0.192
                , relwidth=0.985)
        self.TLabelframeQuery.configure(relief='')
        self.TLabelframeQuery.configure(text='''Database Query''')

        self.btnRunQuery = tk.Button(self.TLabelframeQuery)
        self.btnRunQuery.place(relx=0.884, rely=0.566, height=55, width=150
                , bordermode='ignore')
        self.btnRunQuery.configure(activebackground="#f9f9f9")
        self.btnRunQuery.configure(command=main_support.btnRunQuery)
        self.btnRunQuery.configure(text='''Run Query''')

        self.btnClear = tk.Button(self.TLabelframeQuery)
        self.btnClear.place(relx=0.884, rely=0.138, height=55, width=150
                , bordermode='ignore')
        self.btnClear.configure(activebackground="#f9f9f9")
        self.btnClear.configure(command=main_support.btnClearQueryField)
        self.btnClear.configure(text='''Clear''')

        self.EntryQuery = tk.Entry(self.TLabelframeQuery)
        self.EntryQuery.place(relx=0.007, rely=0.138, height=117, relwidth=0.874
                , bordermode='ignore')
        self.EntryQuery.configure(background="white")
        self.EntryQuery.configure(font="TkFixedFont")
        self.EntryQuery.configure(selectbackground="blue")
        self.EntryQuery.configure(selectforeground="white")
        self.EntryQuery.configure(textvariable=main_support.VarQueryText)

        self.LabelframeSketchTakss = tk.LabelFrame(top)
        self.LabelframeSketchTakss.place(relx=0.007, rely=0.901, relheight=0.086
                , relwidth=0.707)
        self.LabelframeSketchTakss.configure(relief='groove')
        self.LabelframeSketchTakss.configure(text='''Analysis tasks''')

        self.btnOpenSimWindow = tk.Button(self.LabelframeSketchTakss)
        self.btnOpenSimWindow.place(relx=0.01, rely=0.323, height=35, width=320
                , bordermode='ignore')
        self.btnOpenSimWindow.configure(activebackground="#f9f9f9")
        self.btnOpenSimWindow.configure(command=main_support.btnOpenSimWindow)
        self.btnOpenSimWindow.configure(text='''Similarity Search''')

        self.btnOpenARLiftWindow = tk.Button(self.LabelframeSketchTakss)
        self.btnOpenARLiftWindow.place(relx=0.34, rely=0.323, height=35
                , width=320, bordermode='ignore')
        self.btnOpenARLiftWindow.configure(activebackground="#f9f9f9")
        self.btnOpenARLiftWindow.configure(command=main_support.btnOpenARLiftWindow)
        self.btnOpenARLiftWindow.configure(text='''Association Rules with Lift Correlation''')

        self.ButtonOpenAnovaWindow = tk.Button(self.LabelframeSketchTakss)
        self.ButtonOpenAnovaWindow.place(relx=0.667, rely=0.323, height=35
                , width=320, bordermode='ignore')
        self.ButtonOpenAnovaWindow.configure(activebackground="#f9f9f9")
        self.ButtonOpenAnovaWindow.configure(command=main_support.btnOpenAnovaWindow)
        self.ButtonOpenAnovaWindow.configure(text='''Analysis of Variance (ANOVA)''')

        self.btnExit = tk.Button(top)
        self.btnExit.place(relx=0.86, rely=0.907, height=58, width=185)
        self.btnExit.configure(activebackground="#f9f9f9")
        self.btnExit.configure(command=main_support.btnExit)
        self.btnExit.configure(text='''Exit >''')

        self.ButtonAbout = tk.Button(top)
        self.ButtonAbout.place(relx=0.718, rely=0.909, height=58, width=195)
        self.ButtonAbout.configure(activebackground="#f9f9f9")
        self.ButtonAbout.configure(command=main_support.btnAbout)
        self.ButtonAbout.configure(text='''About Sketch''')

# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''
    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))
        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')
        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)
        # Copy geometry methods of master  (taken from ScrolledText.py)
        if py3:
            methods = tk.Pack.__dict__.keys() | tk.Grid.__dict__.keys() \
                  | tk.Place.__dict__.keys()
        else:
            methods = tk.Pack.__dict__.keys() + tk.Grid.__dict__.keys() \
                  + tk.Place.__dict__.keys()
        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''
        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)
        return wrapped

    def __str__(self):
        return str(self.master)

def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''
    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        container.bind('<Enter>', lambda e: _bound_to_mousewheel(e, container))
        container.bind('<Leave>', lambda e: _unbound_to_mousewheel(e, container))
        return func(cls, container, **kw)
    return wrapped

class ScrolledListBox(AutoScroll, tk.Listbox):
    '''A standard Tkinter Listbox widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        tk.Listbox.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)
    def size_(self):
        sz = tk.Listbox.size(self)
        return sz

import platform
def _bound_to_mousewheel(event, widget):
    child = widget.winfo_children()[0]
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        child.bind_all('<MouseWheel>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-MouseWheel>', lambda e: _on_shiftmouse(e, child))
    else:
        child.bind_all('<Button-4>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Button-5>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-Button-4>', lambda e: _on_shiftmouse(e, child))
        child.bind_all('<Shift-Button-5>', lambda e: _on_shiftmouse(e, child))

def _unbound_to_mousewheel(event, widget):
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        widget.unbind_all('<MouseWheel>')
        widget.unbind_all('<Shift-MouseWheel>')
    else:
        widget.unbind_all('<Button-4>')
        widget.unbind_all('<Button-5>')
        widget.unbind_all('<Shift-Button-4>')
        widget.unbind_all('<Shift-Button-5>')

def _on_mousewheel(event, widget):
    if platform.system() == 'Windows':
        widget.yview_scroll(-1*int(event.delta/120),'units')
    elif platform.system() == 'Darwin':
        widget.yview_scroll(-1*int(event.delta),'units')
    else:
        if event.num == 4:
            widget.yview_scroll(-1, 'units')
        elif event.num == 5:
            widget.yview_scroll(1, 'units')

def _on_shiftmouse(event, widget):
    if platform.system() == 'Windows':
        widget.xview_scroll(-1*int(event.delta/120), 'units')
    elif platform.system() == 'Darwin':
        widget.xview_scroll(-1*int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.xview_scroll(-1, 'units')
        elif event.num == 5:
            widget.xview_scroll(1, 'units')

if __name__ == '__main__':
    vp_start_gui()





